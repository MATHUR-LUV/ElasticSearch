version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9 # Use a compatible Elasticsearch version
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # Disable security for simplicity in development
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # Allocate memory for Elasticsearch
    ports:
      - "9200:9200" # HTTP port for Elasticsearch API
      - "9300:9300" # Transport port for Java client (if needed directly)
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data # Persist Elasticsearch data
    networks:
      - app-network

  backend-app:
    build: ./Backend # Build the image from the Dockerfile in the Backend directory
    container_name: spring-boot-backend
    ports:
      - "8080:8080" # Map host port 8080 to container port 8080
    environment:
      # Ensure Spring Boot connects to the Elasticsearch service name within the Docker network
      - SPRING_DATA_ELASTICSEARCH_CLIENT_REACTIVE_ENDPOINTS=elasticsearch:9200
    depends_on:
      - elasticsearch # Ensure Elasticsearch starts before the backend app
    networks:
      - app-network
    # Optional: Add a health check to wait for Elasticsearch to be truly ready
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://elasticsearch:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  elasticsearch-data: # Define the named volume for data persistence

networks:
  app-network: # Define a custom network for services to communicate
    driver: bridge